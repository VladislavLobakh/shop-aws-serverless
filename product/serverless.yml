service: product
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-1
  profile: vladislavlobakh
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    pgDatabaseHost: ${file(credentials.yml):pgDatabaseHost}
    pgDatabasePort: ${file(credentials.yml):pgDatabasePort}
    pgDatabaseName: ${file(credentials.yml):pgDatabaseName}
    pgDatabaseUsername: ${file(credentials.yml):pgDatabaseUsername}
    pgDatabasePassword: ${file(credentials.yml):pgDatabasePassword}
    newProductsCreatedTopic: !Ref NewProductsTopic
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource: !GetAtt CatalogItemsQueue.Arn
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: !Ref NewProductsTopic

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

package:
  individually: true

custom:
  webpack:
    includeModules: true
  autoswagger:
    title: Product Service
    generateSwaggerOnDeploy: true
    typefiles:
      [
        './types/products.type.ts',
        './types/product.type.ts',
        './types/create-product.type.ts'
      ]
    apiType: http
    basePath: /${self:provider.stage}
    swaggerPath: docs

functions:
  getProductsList:
    handler: handlers/getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
          responseData:
            200:
              description: 'Get list of products'
              bodyType: 'Products'
  getProductById:
    handler: handlers/getProductById.getProductById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true
          responseData:
            200:
              description: 'Get product data'
              bodyType: 'Product'
  createProduct:
    handler: handlers/createProduct.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(schemas/create_product.json)}
          bodyType: 'CreateProduct'
          responseData:
            200:
              description: 'Create product'
              bodyType: 'Product'
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: !GetAtt CatalogItemsQueue.Arn

resources:
  Resources:
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalog-items-queue
    NewProductsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: sns-new-products-topic
    NewProductsTopicManySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref NewProductsTopic
        Endpoint: myprivateemail1@gmail.com
        Protocol: email
        FilterPolicy: { 'productsCount': [{ 'numeric': ['>=', 2] }] }
    NewProductsTopicSingleSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref NewProductsTopic
        Endpoint: myprivateemail2@gmail.com
        Protocol: email
        FilterPolicy: { 'productsCount': [{ 'numeric': ['=', 1] }] }
  Outputs:
    CatalogItemsQueueUrl:
      Value: !Ref CatalogItemsQueue
      Export:
        Name: CatalogItemsQueueUrl
    CatalogItemsQueueArn:
      Value: !GetAtt CatalogItemsQueue.Arn
      Export:
        Name: CatalogItemsQueueArn
